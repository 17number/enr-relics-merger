/********************
  * 多言語辞書
  ********************/
const i18n = {
  ja: {
    alertBothFramesFilled: "既に両方の枠が埋まっています。2枚まとめてドラッグ＆ドロップするか、リセットしてやり直してください。",
    alertBothFramesFilledForPaste: "既に両方の枠が埋まっています。リセットしてやり直してください。",
    alertCopyError: "コピー失敗: ",
    alertCopySuccess: "画像をクリップボードにコピーしました",
    alertGenerateSuccess: "結合画像を生成しました",
    alertSelectTwoImages: "2枚目の画像を選択してください",
    copy: "コピー",
    desc: `遺物(1〜3枠)、深き夜の深層遺物(4〜6枠)の遺物効果画像を1枚にまとめます。結合したい 遺物儀式の画像/ステータス画面の画像/プリセット画面の画像 を2枚選択してください。ドラッグ＆ドロップ、画像データのペースト(Win: Ctrl+v, Mac: ⌘+v)も可能です。(<a href="#sample" style="padding: 0; margin: 0;">サンプル</a>)`,
    desc2: `<a href="https://x.com/" target="_blank" style="padding: 0; margin: 0;">X</a> や <a href="https://discord.com/" target="_blank" style="padding: 0; margin: 0;">Discord</a> などで共有してもらえると嬉しいです。`,
    download: "ダウンロード",
    download_name: "ダウンロードファイル名 (省略可)",
    dropHere: "ここに画像をドラッグ＆ドロップできます (2枚)",
    generatedBy: "Generated by ELDEN RING NIGHTREIGN 遺物画像結合ツール",
    inputExample: "入力例:",
    longTap: "画像の コピー/保存/etc をしたい場合は以下画像をロングタップしてください。",
    longTapOrRightClick: "画像の コピー/保存/etc をしたい場合は以下画像をロングタップ(または右クリック)してください。",
    mergeSettings: "結合画像設定",
    note1: "画像はそれぞれ1〜3枠、4〜6枠の遺物効果が写っている必要があります。",
    note2: "座標指定で切り抜いているため画像サイズなどの要因で正常に結合できない場合があります。",
    note3: "選択できる画像は2枚までです。ドラッグ＆ドロップで2枚以上選択した場合は先頭の2枚が使用されます。",
    note4: "選択した画像はブラウザ上で処理され、サーバーには送信されません。",
    note6: "このツールは非公式のものであり、ELDEN RING NIGHTREIGNとは関係ありません。",
    note7: `なにかあれば <a href="https://github.com/17number/enr-relics-merger/issues/new" target="_blank" style="padding: 0; margin: 0;">Issues</a>からご連絡ください。可能な範囲で対応します。すでに<a href="http://github.com/17number/enr-relics-merger/issues?q=is%3Aissue" target="_blank" style="padding: 0; margin: 0;">類似の Issue が無いかを事前確認</a>したうえでご連絡頂けると助かります`,
    noteSummary: "注意事項 (クリックで展開)",
    outputExample: "出力例:",
    pattern1: "パターン1(遺物儀式画面)",
    pattern2: "パターン2(ステータス画面)",
    pattern3: "パターン3(プリセット画面)",
    patternPreset: "プリセット画面",
    patternRitual: "遺物儀式画面",
    patternSelect: "画面タイプ",
    patternStatus: "ステータス画面",
    progress: "処理中...",
    qrEmbed: "Generated By/QRコード 埋め込み",
    relic1_3: "遺物1〜3",
    relic4_6: "遺物4〜6",
    reset: "リセット",
    result: "出力結果",
    sample: "サンプル",
    swap: "画像入れ替え",
    title: "ELDEN RING NIGHTREIGN 遺物画像結合ツール",
  },
  en: {
    alertBothFramesFilled: "Both frames are already filled. Please drag and drop two images at once or reset and try again.",
    alertBothFramesFilledForPaste: "Both frames are already filled. Please reset and try again.",
    alertCopyError: "Copy failed: ",
    alertCopySuccess: "Image copied to clipboard",
    alertGenerateSuccess: "Combined image generated",
    alertSelectTwoImages: "Please select the second image",
    copy: "Copy",
    desc: `Combine relic effect images of relic(slots 1–3) and deep of night depth relic(slots 4–6) into one image. Please select two images from the relic rites screen or the status screen or the preset screen that you want to combine. Drag & drop and image data can also be pasted (Win: Ctrl+v, Mac: ⌘+v). (<a href="#sample" style="padding: 0; margin: 0;">Examples</a>)`,
    desc2: `It would be great if you could share it on <a href="https://x.com/" target="_blank" style="padding: 0; margin: 0;">X</a> or <a href="https://discord.com/" target="_blank" style="padding: 0; margin: 0;">Discord</a>.`,
    download: "Download",
    download_name: "Download File Name (Optional)",
    dropHere: "Drag & Drop images here (2 images)",
    generatedBy: "Generated by ELDEN RING NIGHTREIGN Relic Image Merger",
    inputExample: "Input Example:",
    longTap: "Long-press the image to copy/save/etc.",
    longTapOrRightClick: "Long-press or right-click the image to copy/save/etc.",
    mergeSettings: "Settings",
    note1: "Each image must show the relic effects for slots 1–3 and 4–6.",
    note2: "Due to the cropping method used, images may not combine correctly depending on their size and other factors.",
    note3: "You can select up to 2 images. If you select more than 2 images via drag & drop, only the first 2 will be used.",
    note4: "The selected images are processed in the browser and are not sent to the server.",
    note6: "This tool is unofficial and is not affiliated with ELDEN RING NIGHTREIGN.",
    note7: `If you have any questions, please contact us via <a href="https://github.com/17number/enr-relics-merger/issues/new" target="_blank" style="padding: 0; margin: 0;">Issues</a>. We will respond as much as possible. It would be helpful if you could check for <a href="http://github.com/17number/enr-relics-merger/issues?q=is%3Aissue" target="_blank" style="padding: 0; margin: 0;">similar issues</a> beforehand.`,
    noteSummary: "Notes (Click to Expand)",
    outputExample: "Output Example:",
    pattern1: "Pattern 1 (Relic Rites Screen)",
    pattern2: "Pattern 2 (Status Screen)",
    pattern3: "Pattern 3 (Preset Screen)",
    patternPreset: "Preset Screen",
    patternRitual: "Relic Rites Screen",
    patternSelect: "Screen Type",
    patternStatus: "Status Screen",
    progress: "Processing...",
    qrEmbed: "With Generated By/QR Code",
    relic1_3: "Relics 1–3",
    relic4_6: "Relics 4–6",
    reset: "Reset",
    result: "Result",
    sample: "Examples",
    swap: "Swap Images",
    title: "ELDEN RING NIGHTREIGN Relic Image Merger",
  }
};

function judgeLang() {
  const url = new URL(location.href);
  return url.pathname.match(/\/(en)\/?/) ? "en" : "ja";
}

function t(key) {
  const lang = judgeLang();
  return (i18n[lang] && i18n[lang][key]) || key;
}

/********************
  * トースト通知
  ********************/
function showToast(message, type="info", duration=3000){
  const toast = document.getElementById("toast");
  toast.textContent = message;
  if(type==="error") toast.style.background="rgba(220,53,69,0.85)";
  else if(type==="success") toast.style.background="rgba(40,167,69,0.85)";
  else toast.style.background="rgba(0,0,0,0.85)";
  toast.style.opacity=1;
  toast.style.pointerEvents="auto";
  clearTimeout(toast._timeout);
  toast._timeout = setTimeout(()=>{
    toast.style.opacity=0;
    toast.style.pointerEvents="none";
  }, duration);
}

/********************
  * メイン処理
  ********************/
const fileBlock1 = document.getElementById("file-block1");
const fileBlock2 = document.getElementById("file-block2");
const file1Input = document.getElementById("file1");
const file2Input = document.getElementById("file2");
const preview1 = document.getElementById("preview1");
const preview2 = document.getElementById("preview2");
const reset1 = document.getElementById("reset1");
const reset2 = document.getElementById("reset2");
const swapBtn = document.getElementById("swap");
const resetBtn = document.getElementById("reset");
const addTextQrCheckbox = document.getElementById("add-text-qr");
const copyBtn = document.getElementById("copy");
const downloadLink = document.getElementById("download");
const downloadNameInput = document.getElementById("download_name");
const outputDiv = document.getElementById("output");
const outputImg = document.getElementById("output-img");

// 画面タイプ選択
let selectedPattern = "ritual";
document.querySelectorAll('input[name="pattern"]').forEach(radio=>{
  radio.addEventListener("change",e=>{
    selectedPattern=e.target.value;
    generateMergedImage();
  });
});

addTextQrCheckbox.addEventListener("change", generateMergedImage);

async function loadImage(file){
  return new Promise((resolve,reject)=>{
    const reader=new FileReader();
    reader.onload=e=>{
      const img=new Image();
      img.onload=()=>resolve(img);
      img.src=e.target.result;
    };
    reader.onerror=reject;
    reader.readAsDataURL(file);
  });
}

function setPreview(file, preview, reset){
  const reader=new FileReader();
  reader.onload=e=>{
    preview.src=e.target.result;
    preview.style.display="block";
    reset.style.display="inline-block";
  };
  reader.readAsDataURL(file);
}

file1Input.addEventListener("change",()=>{ setPreview(file1Input.files[0],preview1,reset1); generateMergedImage(); });
file2Input.addEventListener("change",()=>{ setPreview(file2Input.files[0],preview2,reset2); generateMergedImage(); });

/**
  * ペースト
  */
document.addEventListener('paste', (e) => {
  const file1 = file1Input.files[0], file2 = file2Input.files[0];
  if(file1&&file2){
    showToast(t("alertBothFramesFilledForPaste"), "error");
    return;
  }

  const items = e.clipboardData.items;
  for (const item of items) {
    if (item.type.startsWith('image/')) {
      const file = item.getAsFile();
      if(!file1) {
        const dt = new DataTransfer();
        dt.items.add(file);
        file1Input.files = dt.files;
        setPreview(file1Input.files[0],preview1,reset1);
        generateMergedImage();
      } else if(!file2) {
        const dt = new DataTransfer();
        dt.items.add(file);
        file2Input.files = dt.files;
        setPreview(file2Input.files[0],preview2,reset2);
        generateMergedImage();
      }
    }
  }
});

swapBtn.addEventListener("click", () => {
  // ファイルオブジェクトを入れ替え
  const tempFiles = file1Input.files;
  file1Input.files = file2Input.files;
  file2Input.files = tempFiles;

  // プレビューも入れ替え
  const tempSrc = preview1.src;
  preview1.src = preview2.src;
  preview2.src = tempSrc;

  // プレビュー表示制御
  preview1.style.display = file1Input.files[0] ? "block" : "none";
  preview2.style.display = file2Input.files[0] ? "block" : "none";

  // リセットボタン表示制御
  reset1.style.display = file1Input.files[0] ? "inline-block" : "none";
  reset2.style.display = file2Input.files[0] ? "inline-block" : "none";

  generateMergedImage();
});

// 全体リセットボタン
function handleReset(){
  file1Input.value=""; file2Input.value="";
  outputDiv.style.display="none";
  document.querySelectorAll("#preview1, #preview2, #output-img").forEach(img=>{ img.src=""; img.style.display="none"; });
  document.getElementById("canvas").getContext("2d").clearRect(0,0,document.getElementById("canvas").width,document.getElementById("canvas").height);
  document.querySelectorAll("#copy, #download").forEach(btn=>{ btn.style.display="none"; });
  document.querySelectorAll(".ios-copy-info").forEach(el=>el.remove());
  document.querySelectorAll("#reset1, #reset2").forEach(btn=>{ btn.style.display="none"; });
};
resetBtn.addEventListener("click",handleReset);

// 個別リセットボタン
function handleResetIndividual(resetId, fileInputId, previewId){
  document.getElementById(fileInputId).value="";
  outputDiv.style.display="none";
  document.getElementById(previewId).src="";
  document.getElementById(previewId).style.display="none";
  document.getElementById("canvas").getContext("2d").clearRect(0,0,document.getElementById("canvas").width,document.getElementById("canvas").height);
  document.querySelectorAll("#copy, #download").forEach(btn=>{ btn.style.display="none"; });
  document.querySelectorAll(".ios-copy-info").forEach(el=>el.remove());
  document.getElementById(resetId).style.display="none";
};
[1,2].forEach(num=>{
  document.getElementById(`reset${num}`).addEventListener("click",()=>{
    handleResetIndividual(`reset${num}`,`file${num}`,`preview${num}`);
  });
});

function isiOS(){ return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; }
function isSafari() {
  const ua = navigator.userAgent;
  return /^((?!chrome|android).)*safari/i.test(ua);
}
copyBtn.onclick=async()=>{
  const canvas=document.getElementById("canvas");
  canvas.toBlob(async blob=>{
    try{
      await navigator.clipboard.write([new ClipboardItem({ "image/png": blob })]);
      showToast(t("alertCopySuccess"), "success");
      gtag('event', 'clipboard_copy', {
        event_category: 'ui_action',
        event_label: 'Copy Button',
        pattern: selectedPattern,
        qr: addTextQrCheckbox.checked ? 'on' : 'off',
      });
    }
    catch(e){ showToast(t("alertCopyError")+e,"error");}
  },"image/png");
};

function getCropBox(img) {
  if(selectedPattern==="ritual"){
    return { x: img.width*0.05, y: img.height*0.1125, w: img.width*0.325, h: img.height*0.8125 };
  } else if (selectedPattern==="status") {
    return { x: img.width*0.35, y: img.height*0.27, w: img.width*0.40, h: img.height*0.58 };
  } else if (selectedPattern==="preset") {
    return { x: img.width*0.41, y: img.height*0.14, w: img.width*0.4, h: img.height*0.725 };
  }
  return { x: 0, y: 0, w: 0, h: 0 };
}

function handleClickDownloadLink(e) {
  if (!e.isTrusted) {
    return;
  }

  e.preventDefault();

  // ファイル名設定
  const userCustomName = downloadNameInput.value.trim();
  if (userCustomName) {
    downloadLink.download = userCustomName.endsWith(".jpg") ? userCustomName : `${userCustomName}.jpg`;
  } else {
    // デフォルトファイル名生成
    const now = new Date();
    const yyyy = now.getFullYear();
    const mm = String(now.getMonth()+1).padStart(2,'0');
    const dd = String(now.getDate()).padStart(2,'0');
    const hh = String(now.getHours()).padStart(2,'0');
    const min = String(now.getMinutes()).padStart(2,'0');
    const ss = String(now.getSeconds()).padStart(2,'0');
    const defaultName = `enr_merged_relics_${yyyy}${mm}${dd}_${hh}${min}${ss}.jpg`;
    downloadLink.download = defaultName;
  }

  // ダウンロード実行
  e.target.click();

  gtag('event', 'download_image', {
    event_category: 'ui_action',
    event_label: 'Download Image',
    pattern: selectedPattern,
    qr: addTextQrCheckbox.checked ? 'on' : 'off',
    file_name: userCustomName ? 'custom' : 'default',
  });
}
downloadLink.addEventListener("click", handleClickDownloadLink);

async function generateMergedImage() {
  const file1 = file1Input.files[0], file2 = file2Input.files[0];
  if(!file1&&!file2){ return; }
  else if(!file1||!file2){ showToast(t("alertSelectTwoImages"),"info"); return; }

  // 一部要素を初期化
  document.querySelectorAll("#output-img").forEach(img=>{ img.src=""; img.style.display="none"; });
  document.getElementById("canvas").getContext("2d").clearRect(0,0,document.getElementById("canvas").width,document.getElementById("canvas").height);

  const img1 = await loadImage(file1);
  const img2 = await loadImage(file2);
  const crop1 = getCropBox(img1);
  const crop2 = getCropBox(img2);

  // Canvas サイズ（文字＋QRスペース分 高さを少し追加）
  const canvas = document.getElementById("canvas");
  canvas.width = crop1.w + crop2.w;
  canvas.height = crop1.h;
  const baseHeight = crop1.h;
  const multiplier = Math.min(crop1.w, baseHeight) / Math.max(crop1.w, baseHeight);
  const fontSize = Math.max(12, baseHeight * multiplier * 0.04);  // 最小12px
  const qrSize = Math.max(40, baseHeight * multiplier * 0.12);   // 最小40px
  if (addTextQrCheckbox.checked) {
    canvas.height += Math.max(qrSize, fontSize) + 10;
  }

  const ctx = canvas.getContext("2d");

  // 元画像描画
  ctx.drawImage(img1, crop1.x, crop1.y, crop1.w, crop1.h, 0, 0, crop1.w, crop1.h);
  ctx.drawImage(img2, crop2.x, crop2.y, crop2.w, crop2.h, crop1.w, 0, crop2.w, crop2.h);

  if (addTextQrCheckbox.checked) {
    // 文字描画
    const text1 = t("generatedBy");
    const text2 = `https://17number.github.io/enr-relics-merger/`;
    ctx.font = `${fontSize}px sans-serif`;
    ctx.fillStyle = "white";
    ctx.strokeStyle = "lightskyblue";
    ctx.textAlign = "left";
    ctx.strokeText(text1, fontSize * 0.5, canvas.height - (fontSize * 2.0));
    ctx.fillText(text1, fontSize * 0.5, canvas.height - (fontSize * 2.0));
    ctx.strokeText(text2, fontSize * 0.5, canvas.height - (fontSize * 0.5));
    ctx.fillText(text2, fontSize * 0.5, canvas.height - (fontSize * 0.5));

    // QRコード生成
    const qr = qrcode(0, 'L');
    qr.addData(text2);
    qr.make();
    const qrCanvas = document.createElement("canvas");
    qrCanvas.width = qrSize;
    qrCanvas.height = qrSize;
    const qrCtx = qrCanvas.getContext("2d");
    const tileW = qrSize / qr.getModuleCount();
    const tileH = qrSize / qr.getModuleCount();
    for(let r=0; r<qr.getModuleCount(); r++){
      for(let c=0; c<qr.getModuleCount(); c++){
        qrCtx.fillStyle = qr.isDark(r, c) ? "#293179" : "#ffffff";
        qrCtx.fillRect(c*tileW, r*tileH, tileW, tileH);
      }
    }
    // Canvas に QR を貼り付け（右下）
    ctx.drawImage(qrCanvas, canvas.width - qrSize - 10, canvas.height - qrSize - 5);
  }

  // 出力画像
  const dataUrl = canvas.toDataURL("image/jpeg");
  outputImg.src = dataUrl;
  outputImg.style.display = "block";
  outputDiv.style.display = "block";

  showToast(t("alertGenerateSuccess"), "success");

  // ダウンロード設定
  downloadLink.href = dataUrl;
  downloadLink.style.display = "inline-block";

  // iOS 対応コピー
  document.querySelectorAll(".ios-copy-info").forEach(el => el.remove());
  if (!isiOS() && !isSafari()){
    copyBtn.style.display="inline-block";
  } else {
    // Safari や iOS で Clipboard API が使えない場合はコピー非表示
    copyBtn.style.display="none";
    const infoText = document.createElement("p");
    infoText.id = "ios-copy-info";
    if (isiOS()) {
      infoText.textContent = t("longTap");
    } else {
      infoText.textContent = t("longTapOrRightClick");
    }
    infoText.style.color="#555";
    infoText.style.margin="0";
    infoText.classList.add("ios-copy-info");
    copyBtn.parentElement.insertAdjacentElement("beforeend", infoText);
  }

  gtag('event', 'merge_image', {
    event_category: 'ui_action',
    event_label: 'Merge Image',
    pattern: selectedPattern,
    qr: addTextQrCheckbox.checked ? 'on' : 'off',
  });
}

// ドラッグ＆ドロップ
const dropZone=document.getElementById("drop-zone");
dropZone.addEventListener("dragover",e=>{
  e.preventDefault();
  dropZone.classList.add("dragover");
});
dropZone.addEventListener("dragleave",()=>{
  dropZone.classList.remove("dragover");
});
dropZone.addEventListener("drop", e => {
  e.preventDefault();
  dropZone.classList.remove("dragover");

  const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith("image/"));
  if(files.length === 0) return;

  // 1枚ドロップ
  if(files.length === 1){
    if(!file1Input.files[0]){
      const dt1 = new DataTransfer();
      dt1.items.add(files[0]);
      file1Input.files = dt1.files;
      setPreview(files[0], preview1, reset1);
    } else if(!file2Input.files[0]){
      const dt2 = new DataTransfer();
      dt2.items.add(files[0]);
      file2Input.files = dt2.files;
      setPreview(files[0], preview2, reset2);
    } else {
      showToast(t("alertBothFramesFilled"), "error");
    }
  }
  // 2枚以上ドロップ → 総入れ替え
  else {
    const dt1 = new DataTransfer();
    const dt2 = new DataTransfer();
    dt1.items.add(files[0]);
    dt2.items.add(files[1]);
    file1Input.files = dt1.files;
    file2Input.files = dt2.files;
    setPreview(files[0], preview1, reset1);
    setPreview(files[1], preview2, reset2);
  }

  generateMergedImage();
});

// 個別ドラッグ＆ドロップ
function enableDropOnBlock(blockEl, previewEl, resetEl, fileInput) {
  // ドラッグ中の見た目を変える
  blockEl.addEventListener("dragover", e => {
    e.preventDefault();
    blockEl.style.border = "2px dashed #3399ff";
    blockEl.style.background = "#3399ff33";
  });

  blockEl.addEventListener("dragleave", () => {
    blockEl.style.border = "";
    blockEl.style.background = "";
  });

  // ドロップされたときの処理
  blockEl.addEventListener("drop", e => {
    e.preventDefault();
    blockEl.style.border = "";
    blockEl.style.background = "";
    if (!e.dataTransfer.files.length) return;

    const file = e.dataTransfer.files[0];
    if (!file.type.startsWith("image/")) return;

    const reader = new FileReader();
    reader.onload = ev => {
      const dt = new DataTransfer();
      dt.items.add(file);
      fileInput.files = dt.files;
      setPreview(fileInput.files[0], previewEl, resetEl);
      generateMergedImage();
    };
    reader.readAsDataURL(file);
  });
}

// .file-block をドロップ対象にする
enableDropOnBlock(fileBlock1, preview1, reset1, file1Input);
enableDropOnBlock(fileBlock2, preview2, reset2, file2Input);

// オーバーレイ
function enableOverlay(selector) {
  document.querySelectorAll(selector).forEach(img => {
    img.addEventListener("click", () => {
      const overlay = document.getElementById("overlay");
      const overlayImg = document.getElementById("overlay-img");
      overlayImg.src = img.src;
      overlay.classList.add("active");
    });
  });
}
enableOverlay("#preview1, #preview2, #output-img, .sample-area img");
const overlay=document.getElementById("overlay");
overlay.addEventListener("click",()=>overlay.classList.remove("active"));

// バージョン情報取得・表示
fetch("https://17number.github.io/enr-relics-merger/version.json")
  .then(res => res.json())
  .then(v => {
    const hash = v.hash;
    const date = new Date(v.date).toLocaleString();
    document.getElementById("version").textContent =
      `Commit: ${hash} (${date})`;
  })
  .catch(() => {});
